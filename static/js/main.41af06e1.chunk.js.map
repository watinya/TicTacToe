{"version":3,"sources":["index.js"],"names":["Square","props","className","winning","onClick","value","Board","i","this","squares","boardSquare","row","boardRow","col","keys","winningLine","includes","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","oIsNext","isDescending","slice","length","calculateWinner","setState","concat","location","step","status","current","winner","moves","map","move","desc","jumpTo","sign","line","handleClick","restart","id","sortHistory","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wNAiBA,SAASA,EAAOC,GACZ,OACI,wBAAQC,UAAS,iBAAYD,EAAME,QAAU,eAAiB,IAAMC,QAASH,EAAMG,QAAnF,SACKH,EAAMI,Q,IAKbC,E,kKASF,SAAaC,EAAGJ,GAAU,IAAD,OACrB,OACI,cAACH,EAAD,CAEIK,MAASG,KAAKP,MAAMQ,QAAQF,GAC5BJ,QAAWA,EACXC,QAAW,kBAAM,EAAKH,MAAMG,QAAQG,Q,oBAKhD,WAYI,IAHA,IAAIG,EAAc,GAGVC,EAAM,EAAIA,EAFN,EAEmBA,IAAM,CAEjC,IADA,IAAIC,EAAW,GACPC,EAAM,EAAGA,EAJT,EAIsBA,IAAM,CAChC,IAAIC,EALA,EAKQH,EAAeE,EAEvBV,GAAU,EACRY,EAAcP,KAAKP,MAAMc,YAC5BA,GAAeA,EAAYC,SAASF,KAG3BX,GAAU,GAMtBS,EAASK,KAAK,+BAAkBT,KAAKU,aAAaJ,EAAMX,IAA/BW,IAE7BJ,EAAYO,KAAK,qBAAKf,UAAU,YAAf,SAAsCU,GAAND,IAIrD,OACI,8BACKD,Q,GAxDGS,IAAMC,WAgFpBC,E,kDACF,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDqB,MAAQ,CACTC,QAAS,CAAC,CACNd,QAASe,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,EACTC,cAAc,GARJ,E,+CAYlB,SAAYrB,GACR,IAKMgB,EAAUf,KAAKc,MAAMC,QAAQM,MAAM,EAAGrB,KAAKc,MAAMI,WAAa,GAE9DjB,EADUc,EAAQA,EAAQO,OAAS,GACjBrB,QAAQoB,QAG7BE,EAAgBtB,IAAYA,EAAQF,KAIvCE,EAAQF,GAAKC,KAAKc,MAAMK,QAAU,IAAM,IACxCnB,KAAKwB,SAAS,CACVT,QAASA,EAAQU,OAAO,CAAC,CACrBxB,QAASA,EACTyB,SAlBU,CACd,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GACpB,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GACpB,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAeI3B,MAExBmB,WAAYH,EAAQO,OACpBH,SAAUnB,KAAKc,MAAMK,a,oBAI7B,SAAOQ,GACH3B,KAAKwB,SAAS,CACVN,WAAYS,EACZR,QAAUQ,EAAO,IAAO,M,yBAIhC,WACI3B,KAAKwB,SAAS,CACVJ,cAAepB,KAAKc,MAAMM,iB,qBAIlC,WACIpB,KAAKwB,SAAS,CACVT,QAAS,CAAC,CACNd,QAASe,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,EACTC,cAAc,M,oBAItB,WAAU,IAmBFQ,EACArB,EApBC,OACCQ,EAAUf,KAAKc,MAAMC,QACrBc,EAAUd,EAAQf,KAAKc,MAAMI,YAC7BY,EAASP,EAAgBM,EAAQ5B,SAEjC8B,EAAQhB,EAAQiB,KAAI,SAACL,EAAMM,GAC7B,IACMC,EAAOD,EACT,eAAiBA,EAAO,KAFZA,EAAO,EAAK,IAAM,KAES,MAAQlB,EAAQkB,GAAMP,SAC7D,mBACJ,OACI,6BACI,wBAAQ9B,QAAS,kBAAM,EAAKuC,OAAOF,IAAnC,SACMA,IAAS,EAAKnB,MAAMI,WAAc,4BAAIgB,IAAYA,KAFnDD,MAmBjB,OATGH,GACCF,EAAS,YAAcE,EAAOM,KAC9B7B,EAAcuB,EAAOO,MAIrBT,EAHOC,EAAQ5B,QAAQO,SAAS,MAGvB,kBAAoBR,KAAKc,MAAMK,QAAU,IAAM,KAF/C,OAMT,sBAAKzB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAACI,EAAD,CACIG,QAAW4B,EAAQ5B,QACnBM,YAAeA,EACfX,QAAS,SAACG,GAAD,OAAO,EAAKuC,YAAYvC,QAGzC,sBAAKL,UAAU,YAAf,UACI,wBAAQE,QAAS,kBAAM,EAAK2C,WAA5B,qBAGA,qBAAKC,GAAG,OAAR,SAAgBZ,IAChB,yBAAQhC,QAAS,kBAAM,EAAK6C,eAA5B,sBACczC,KAAKc,MAAMM,aAAe,YAAc,gBAEtD,6BACKpB,KAAKc,MAAMM,aAAeW,EAAMW,UAAYX,c,GA/GlDpB,IAAMC,WAuHzB,SAASW,EAAgBtB,GAYrB,IAXA,IAAM0C,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGH5C,EAAI,EAAGA,EAAI4C,EAAMrB,OAAQvB,IAAI,CACjC,kBAAkB4C,EAAM5C,GAAxB,GAAO6C,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAG7C,EAAQ2C,IAAM3C,EAAQ2C,KAAO3C,EAAQ4C,IAAM5C,EAAQ2C,KAAO3C,EAAQ6C,GACjE,MAAO,CACHV,KAAMnC,EAAQ2C,GACdP,KAAMM,EAAM5C,IAKxB,OAAO,KAKXgD,IAASC,OACL,cAACnC,EAAD,IACAoC,SAASC,eAAe,W","file":"static/js/main.41af06e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// class Square extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <button \r\n//                 className=\"square\" \r\n//                 onClick={() => this.props.onClick()}\r\n//             >\r\n//                 {this.props.value}\r\n//             </button>\r\n//         );\r\n//     }\r\n// }\r\n//class如只包含render且沒有自己state的conpoent, 可改用下方function component\r\nfunction Square(props) {\r\n    return(\r\n        <button className={`square ${props.winning ? 'winning-line' : ''}`} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n  \r\nclass Board extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         squares: Array(9).fill(null),\r\n    //         oIsNext: true,\r\n    //     };\r\n    // }\r\n\r\n    renderSquare(i, winning) {\r\n        return (\r\n            <Square \r\n                //-----props-----\r\n                value = {this.props.squares[i]}\r\n                winning = {winning}\r\n                onClick = {() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n    //     let boardSquares = [];\r\n    // for(let row = 0; row < 3; row++){\r\n    //   let boardRow = [];\r\n    //   for(let col = 0; col < 3; col++){\r\n    //     boardRow.push(<span key={(row * 3) + col}>{this.renderSquare((row * 3) + col)}</span>);\r\n    //   }\r\n    //   boardSquares.push(<div className=\"board-row\" key={row}>{boardRow}</div>);\r\n    // }\r\n        let boardSquare = [];\r\n        let lines = 3;\r\n        \r\n        for(let row = 0 ; row < lines; row++){\r\n            let boardRow = [];\r\n            for(let col = 0; col < lines; col++){\r\n                let keys = (row * lines) + col;\r\n\r\n                let winning = false;\r\n                const winningLine = this.props.winningLine;\r\n                if(winningLine && winningLine.includes(keys)){\r\n                    //for(let i = 0; i < winningLine.length; i++){\r\n                        //if(winningLine.includes(keys)){\r\n                            winning = true;\r\n                        //}\r\n                    //}\r\n                }\r\n\r\n                //需用span(單區塊)，用div(整條)要在額外加CSS(兩者定義不同)\r\n                boardRow.push(<span key={keys}>{this.renderSquare(keys, winning)}</span>);\r\n            }\r\n            boardSquare.push(<div className=\"board-row\" key={row}>{boardRow}</div>);\r\n        }\r\n        // console.log(boardSquare);\r\n\r\n        return (\r\n            <div>\r\n                {boardSquare}\r\n            </div>\r\n            //上下程式碼結果相同\r\n            // <div>\r\n            //     <div className=\"board-row\">\r\n            //         {this.renderSquare(0)}\r\n            //         {this.renderSquare(1)}\r\n            //         {this.renderSquare(2)}\r\n            //     </div>\r\n            //     <div className=\"board-row\">\r\n            //         {this.renderSquare(3)}\r\n            //         {this.renderSquare(4)}\r\n            //         {this.renderSquare(5)}\r\n            //     </div>\r\n            //     <div className=\"board-row\">\r\n            //         {this.renderSquare(6)}\r\n            //         {this.renderSquare(7)}\r\n            //         {this.renderSquare(8)}\r\n            //     </div>\r\n            // </div>\r\n        );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n    constructor(props){\r\n        super(props);   //一定要有!!!!!!\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            oIsNext: true,\r\n            isDescending: false,\r\n        };\r\n    }\r\n    \r\n    handleClick(i) {\r\n        const locations = [\r\n            [1, 1], [1, 2], [1, 3],\r\n            [2, 1], [2, 2], [2, 3],\r\n            [3, 1], [3, 2], [3, 3],\r\n        ];\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        //如分出勝負責提前回傳(不可再click)\r\n        if(calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.oIsNext ? 'O' : 'X';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: locations[i],\r\n            }]),\r\n            stepNumber: history.length,\r\n            oIsNext: !this.state.oIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            oIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    sortHistory(){\r\n        this.setState({\r\n            isDescending: !this.state.isDescending,\r\n        });\r\n    }\r\n\r\n    restart(){\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            oIsNext: true,\r\n            isDescending: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        \r\n        const moves = history.map((step, move) => {\r\n            const player = (move % 2) ? 'O' : 'X';\r\n            const desc = move ?\r\n                'Go to move #' + move + ' ' + player + ' @ ' + history[move].location:\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>\r\n                        {(move === this.state.stepNumber) ? <b>{desc}</b> : desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n        \r\n        let status;\r\n        let winningLine;\r\n        if(winner) {\r\n            status = 'Winner : ' + winner.sign;\r\n            winningLine = winner.line;\r\n        } else if(!current.squares.includes(null)){\r\n            status = 'Draw';\r\n        } else {\r\n            status = 'Next Player : ' + (this.state.oIsNext ? 'O' : 'X');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares = {current.squares}\r\n                        winningLine = {winningLine}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <button onClick={() => this.restart()}>\r\n                        RESTART\r\n                    </button>\r\n                    <div id=\"info\">{status}</div>\r\n                    <button onClick={() => this.sortHistory()}>\r\n                        Sort by: {this.state.isDescending ? 'Ascending' : 'Descending'}\r\n                    </button>\r\n                    <ol>\r\n                        {this.state.isDescending ? moves.reverse() : moves}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for(let i = 0; i < lines.length; i++){\r\n        const [a, b, c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            return {\r\n                sign: squares[a],\r\n                line: lines[i]\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n  \r\n// ========================================\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n  "],"sourceRoot":""}